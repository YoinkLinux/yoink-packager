#!/usr/bin/env python3

import os
import sys
import csv
import argparse
from enum import Enum

package_by_name = []
package_by_file = []
package_dependencies = []

yoink_dir="/etc/yoink/db"
yoink_db="{0}/yoink.db".format(yoink_dir)
installed_db="{0}/installed.db".format(yoink_dir)
class log_level(Enum):
	INFO = 0
	WARN = 1
	ERR = 2


def log(level,line):
	if level == log_level.INFO:
		print("[INFO] {0}".format(line))

def create_package_list():
	rows = []
	log(log_level.INFO,"Opening database: {0}".format(yoink_db))
	with open(yoink_db, 'r') as db:
		db_reader = csv.reader(db)
		db_fields = next(db_reader)

		for row in db_reader:
			rows.append(row)
		for row in rows:
			try:	
				package_by_name.append(row[0])
				package_by_file.append(row[1])
				package_dependencies.append(row[2].strip().split(' '))
			except:
				pass

def resolve_dependencies(dependencies):
	for dependency in dependencies:
		try:
			dep_index = package_by_name.index(dependency)
		except:
			continue
		dep_list = package_dependencies[dep_index]
		for dep in dep_list:
			if (dep not in dependencies) and not dep == '':
				dependencies.append(dep)
				dependencies=resolve_dependencies(dependencies)
	return dependencies		
		

def generate_install_list(package_list):
	to_install = []
	dependencies = []
	for package in package_list:
		pkg_index = package_by_name.index(package)
		to_install.append(package)
		for dependency in package_dependencies[pkg_index]:
			dependencies.append(dependency)
	tmp_list = []
	for x in to_install:
		tmp_list.append(x)
	deps = resolve_dependencies(dependencies)
	for x in deps:
		if x is not '':
			tmp_list.append(x)

	to_install = tmp_list

	if 'filesystem' in to_install:
		to_install.remove('filesystem')
		to_install.insert(0,'filesystem')
	print(to_install)
	

def update():
	log(log_level.INFO,"Updating database...")	
	os.system('$(wget -q -O /etc/yoink/db/yoink.db "$YOINK_MIRROR/yoinklinux/yoink.db") 2>&1 > /dev/null')
	print("Done.")

def getOptions(args=sys.argv[1:]):
	parser = argparse.ArgumentParser(description="Desc.")
	parser.add_argument("-i","--install",nargs='+',help="Installs the given programs")
	parser.add_argument("-u","--update",nargs='*',help="Updates yoink.")
	options = parser.parse_args(args)
	return options

def main():
	options = getOptions(sys.argv[1:])
	print(options)
	if options.install:
		print(options.install)
		create_package_list()
		generate_install_list(options.install)

if __name__ == '__main__':
	main()
